
#include <iostream>
#include <time.h>

#include "TinyWeather.h"

int main(int argc, char *argv[])
{
// Say hello to the world!
    std::cout << "Hello world, a skeleton app generated by appbuild.\n";

// Display the constants defined by app build. \n";
    std::cout << "Application Version " << APP_VERSION << '\n';
    std::cout << "Build date and time " << APP_BUILD_DATE_TIME << '\n';
    std::cout << "Build date " << APP_BUILD_DATE << '\n';
    std::cout << "Build time " << APP_BUILD_TIME << '\n';

    tinyweather::OpenWeatherMap myWeather("__PUT_YOUR_APP_ID_HERE__");

    myWeather.Get(50.72824,-1.15244,[](bool pDownloadedOk,const tinyweather::OpenWeatherMap &pTheWeather)
    {
        if( pDownloadedOk )
        {
            std::cout << "Today " << pTheWeather.mCurrent.mDisplay.mDescription << '\n';

            std::cout << "Hourly\n";
            for( const auto& w : pTheWeather.mHourly )
            {
                std::cout   << "      "
                            << w.mTime.GetDate() << ' ' << w.mTime.GetTime() << ' '
                            << w.mDisplay.mDescription << ' '
                            << w.mTemperature.c << "C\n";
            }

            std::cout << "Next few days\n";
            for( const auto& w : pTheWeather.mDaily )
            {
                std::cout   << "      "
                            << w.mTime.GetDate() << ' ' << w.mTime.GetTime() << ' '
                            << w.mDisplay.mDescription << ' '
                            << w.mTemperature.Day.c << "C\n";
            }

            std::time_t result = std::time(nullptr);
            result += (24*60*60);// Advance one day......

            const auto* tomorrow = pTheWeather.GetHourlyForcast(result);

            if( tomorrow )
            {
                std::cout << "Tomorrow at " << tomorrow->mTime.GetDate() << " " << tomorrow->mTime.GetTime() << " Min " << tomorrow->mTemperature.c << "C\n";
            }

            tinyweather::HourlyIconVector icons = pTheWeather.GetTodaysHourlyIconCodes(std::time(nullptr));
            for( auto& i : icons )
            {
                std::cout << "[" << i.first << "," << i.second << "] ";
            }
            std::cout << "\n";

        }
        else
        {
            std::cerr << "Failed to fetch weather, check your key, if it is new can take sometime to be usable.\n";
        }
        
    });

// And quit;
    return EXIT_SUCCESS;
}
